{"version":3,"sources":["reportWebVitals.js","value.js","control.js","action/actionTypes.js","counter.js","action/index.js","reducer/counter.js","reducer/color.js","reducer/index.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Value","this","props","number","Component","defaultProps","Control","onClick","onPlus","onSubtract","onColor","warnUnbinded","func","console","warn","INCREMENT","DECREMENT","SET_COLOR","Counter","doIncrement","doDecrement","connect","state","counter","setColor","setcolor","color","dispatch","type","types","doSetColor","initializeState","Reducers","combineReducers","action","Math","random","StoreInstance","createStore","log","getState","subscribe","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"mKAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,iDCJOQ,E,4JACjB,WACI,OACI,8BACI,6BAAKC,KAAKC,MAAMC,e,GAJGC,aAcnCJ,EAAMK,aAAe,CACjBF,QAAS,G,ICfQG,E,kDACjB,WAAYJ,GAAQ,uCACVA,G,0CAGV,WACI,OACI,gCACI,wBAAQK,QAASN,KAAKC,MAAMM,OAA5B,eACA,wBAAQD,QAASN,KAAKC,MAAMO,WAA5B,eACA,wBAAQF,QAASN,KAAKC,MAAMQ,QAA5B,0B,GAVqBN,aAsBrC,SAASO,EAAaC,GAClB,OAAOC,QAAQC,KAAR,UAAgBF,EAAhB,iBAGXN,EAAQD,aAAe,CACnBG,OAAQG,EAAa,UACrBF,WAAYE,EAAa,cACzBD,QAASC,EAAa,YChCnB,IAAMI,EAAY,YACZC,EAAY,YACZC,EAAY,Y,ICSnBC,E,4JACF,WACI,OACI,gCACI,cAAC,EAAD,CAAOf,OAAQF,KAAKC,MAAMC,SAC1B,cAAC,EAAD,CAASK,OAAQP,KAAKC,MAAMiB,YAAaV,WAAYR,KAAKC,MAAMkB,qB,GAL1DhB,aA2BPiB,eAhBS,SAACC,GACrB,MAAO,CACHnB,OAAQmB,EAAMC,QAAQpB,OACtBqB,SAAUF,EAAMG,SAASC,UAIN,SAACC,GAExB,MAAO,CACHR,YAAa,WAAQQ,EC7BlB,CACHC,KAAMC,KD6BNT,YAAa,WAAQO,ECxBlB,CACHC,KAAMC,KDwBNC,WAAY,WCpBb,IAAkBJ,EDoBGC,ECnBjB,CACHC,KAAMC,EACNH,MAAOA,QDqBAL,CAA6CH,G,OEpCtDa,EAAkB,CACpB5B,OAAQ,GCDZ,IAAM4B,EAAkB,CACpBL,MAAO,CAAC,IAAK,IAAK,MCCtB,IAAMM,EAAWC,YAAgB,CAC7BV,QFCW,WAAmD,IAAlCD,EAAiC,uDAAzBS,EAAiBG,EAAQ,uCAE7D,OAAQA,EAAON,MACX,KAAKC,EACD,OAAO,2BAAKP,GAAZ,IAAmBnB,OAAQmB,EAAMnB,OAAS,IAC9C,KAAK0B,EACD,OAAO,2BAAKP,GAAZ,IAAmBnB,OAAQmB,EAAMnB,OAAS,IAE9C,QACI,OAAOmB,IETfG,SDAW,WAAoD,IAAlCH,EAAiC,uDAAzBS,EAAiBG,EAAQ,uCAE9D,OAAQA,EAAON,OACNC,EACM,CAAEH,MAAO,CAACS,KAAKC,SAAW,IAAKD,KAAKC,SAAW,IAAKD,KAAKC,SAAW,MAGpEd,KCJJU,ICETK,EAAgBC,YAAYN,GAClCnB,QAAQ0B,IAAIF,EAAcG,YAE1BH,EAAcI,WAAU,kBAAM5B,QAAQ0B,IAAIF,EAAcG,eAExDE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOR,EAAjB,SACE,cAAC,EAAD,QAGJS,SAASC,eAAe,SAM1BxD,M","file":"static/js/main.ea3dad6c.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class Value extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>{this.props.number}</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nValue.propTypes = {\r\n    number: PropTypes.number\r\n}\r\n\r\nValue.defaultProps = {\r\n    number: -1\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class Control extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button onClick={this.props.onPlus}>+</button>                \r\n                <button onClick={this.props.onSubtract}>-</button>\r\n                <button onClick={this.props.onColor}>Color</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nControl.propTypes = {\r\n    onPlus: PropTypes.func,\r\n    onSubtract: PropTypes.func,\r\n    onColor: PropTypes.func\r\n}\r\n\r\nfunction warnUnbinded(func) {\r\n    return console.warn(`${func} not defined`);\r\n}\r\n\r\nControl.defaultProps = {\r\n    onPlus: warnUnbinded('onPlus'),\r\n    onSubtract: warnUnbinded('onSubtract'),\r\n    onColor: warnUnbinded('onColor')\r\n}\r\n","export const INCREMENT = 'INCREMENT' \r\nexport const DECREMENT = 'DECREMENT'\r\nexport const SET_COLOR = 'SET_COLOR'","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Value from './value'\r\nimport Control from './control'\r\n\r\nimport { connect, bindActionCreators } from 'react-redux'\r\nimport * as actions from './action'\r\n\r\n                //<Value number={this.props.store.getState().counter.number}/>\r\n\r\nclass Counter extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Value number={this.props.number}/>\r\n                <Control onPlus={this.props.doIncrement} onSubtract={this.props.doDecrement}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        number: state.counter.number,\r\n        setColor: state.setcolor.color\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    //return bindActionCreators(actions, dispatch);\r\n    return {\r\n        doIncrement: () => { dispatch(actions.increment()) },\r\n        doDecrement: () => { dispatch(actions.decrement()) },\r\n        doSetColor: () => { dispatch(actions.setColor()) }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);","import * as types from './actionTypes'\r\n\r\nexport function increment() {\r\n    return {\r\n        type: types.INCREMENT\r\n    }\r\n}\r\n\r\nexport function decrement() {\r\n    return {\r\n        type: types.DECREMENT\r\n    }\r\n}\r\n\r\nexport function setColor(color) {\r\n    return {\r\n        type: types.SET_COLOR,\r\n        color: color\r\n    }\r\n}","import * as types from '../action/actionTypes'\r\n\r\nconst initializeState = {\r\n    number: 0\r\n}\r\n\r\nexport default function counter(state = initializeState, action) {\r\n\r\n    switch (action.type) {\r\n        case types.INCREMENT:\r\n            return { ...state, number: state.number + 1 }\r\n        case types.DECREMENT:\r\n            return { ...state, number: state.number - 1 }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as types from '../action/actionTypes'\r\n\r\nconst initializeState = {\r\n    color: [255, 255, 255]\r\n}\r\n\r\nexport default function setcolor(state = initializeState, action) {\r\n\r\n    switch (action.type) {\r\n        case types.SET_COLOR:\r\n            return { color: [Math.random() % 255, Math.random() % 255, Math.random() % 255] }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport counter from './counter'\r\nimport setcolor from './color'\r\n\r\nconst Reducers = combineReducers({\r\n    counter,\r\n    setcolor\r\n})\r\n\r\nexport default Reducers","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux';\n\nimport Counter from './counter';\nimport Reducers from './reducer';\n\nconst StoreInstance = createStore(Reducers);\nconsole.log(StoreInstance.getState());\n\nStoreInstance.subscribe(() => console.log(StoreInstance.getState()));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={StoreInstance}>\n      <Counter />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}